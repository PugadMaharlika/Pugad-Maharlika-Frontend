{"ast":null,"code":"import axios from \"axios\";\nconst API = async (axiosConfig, shouldFetch = true, overrideConfig = {}) => {\n  let res = null;\n  let error = null;\n  let loading = false;\n  axiosConfig.headers = {\n    \"Content-Type\": \"application/json\",\n    \"x-auth-token\": localStorage.getItem(\"authToken\"),\n    \"x-refresh-token\": localStorage.getItem(\"refreshToken\")\n  };\n  if (shouldFetch) {\n    loading = true;\n    try {\n      const response = await axios({\n        ...axiosConfig,\n        ...overrideConfig\n      });\n      res = response;\n      error = null;\n    } catch (err) {\n      error = err;\n    } finally {\n      loading = false;\n    }\n  }\n  return {\n    res,\n    error,\n    loading\n  };\n};\n_c = API;\nexport default API;\n\n// import API from \"../../service/API\";\n\n// async function sendData() {\n//   const axiosConfig = {\n//     url: \"https://api.example.com/submit\",\n//     method: \"POST\",\n//     data: {  // The data you want to post\n//       name: \"John Doe\",\n//       email: \"john.doe@example.com\",\n//     },\n//     headers: {\n//       'Content-Type\": \"application/json',\n//       'x-auth-token': authToken,              // Authorization token\n//       'x-refresh-token': refreshToken,        // Custom refresh token header\n//     },\n//   };\n\n//   const { data, error, loading } = await API(axiosConfig);\nvar _c;\n$RefreshReg$(_c, \"API\");","map":{"version":3,"names":["axios","API","axiosConfig","shouldFetch","overrideConfig","res","error","loading","headers","localStorage","getItem","response","err","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/BSIT_B/IV-B/Capstone 2/Pugad-Maharlika-Frontend/client/src/service/API.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst API = async (axiosConfig, shouldFetch = true, overrideConfig = {}) => {\r\n  let res = null;\r\n  let error = null;\r\n  let loading = false;\r\n\r\n  axiosConfig.headers = {\r\n    \"Content-Type\": \"application/json\",\r\n    \"x-auth-token\": localStorage.getItem(\"authToken\"),\r\n    \"x-refresh-token\": localStorage.getItem(\"refreshToken\"),\r\n  };\r\n  if (shouldFetch) {\r\n    loading = true;\r\n    try {\r\n      const response = await axios({ ...axiosConfig, ...overrideConfig });\r\n      res = response;\r\n      error = null;\r\n    } catch (err) {\r\n      error = err;\r\n    } finally {\r\n      loading = false;\r\n    }\r\n  }\r\n\r\n  return { res, error, loading };\r\n};\r\n\r\nexport default API;\r\n\r\n// import API from \"../../service/API\";\r\n\r\n// async function sendData() {\r\n//   const axiosConfig = {\r\n//     url: \"https://api.example.com/submit\",\r\n//     method: \"POST\",\r\n//     data: {  // The data you want to post\r\n//       name: \"John Doe\",\r\n//       email: \"john.doe@example.com\",\r\n//     },\r\n//     headers: {\r\n//       'Content-Type\": \"application/json',\r\n//       'x-auth-token': authToken,              // Authorization token\r\n//       'x-refresh-token': refreshToken,        // Custom refresh token header\r\n//     },\r\n//   };\r\n\r\n//   const { data, error, loading } = await API(axiosConfig);\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAG,MAAAA,CAAOC,WAAW,EAAEC,WAAW,GAAG,IAAI,EAAEC,cAAc,GAAG,CAAC,CAAC,KAAK;EAC1E,IAAIC,GAAG,GAAG,IAAI;EACd,IAAIC,KAAK,GAAG,IAAI;EAChB,IAAIC,OAAO,GAAG,KAAK;EAEnBL,WAAW,CAACM,OAAO,GAAG;IACpB,cAAc,EAAE,kBAAkB;IAClC,cAAc,EAAEC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IACjD,iBAAiB,EAAED,YAAY,CAACC,OAAO,CAAC,cAAc;EACxD,CAAC;EACD,IAAIP,WAAW,EAAE;IACfI,OAAO,GAAG,IAAI;IACd,IAAI;MACF,MAAMI,QAAQ,GAAG,MAAMX,KAAK,CAAC;QAAE,GAAGE,WAAW;QAAE,GAAGE;MAAe,CAAC,CAAC;MACnEC,GAAG,GAAGM,QAAQ;MACdL,KAAK,GAAG,IAAI;IACd,CAAC,CAAC,OAAOM,GAAG,EAAE;MACZN,KAAK,GAAGM,GAAG;IACb,CAAC,SAAS;MACRL,OAAO,GAAG,KAAK;IACjB;EACF;EAEA,OAAO;IAAEF,GAAG;IAAEC,KAAK;IAAEC;EAAQ,CAAC;AAChC,CAAC;AAACM,EAAA,GAxBIZ,GAAG;AA0BT,eAAeA,GAAG;;AAElB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}