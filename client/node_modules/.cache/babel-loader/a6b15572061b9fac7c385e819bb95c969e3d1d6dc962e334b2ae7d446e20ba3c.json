{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from \"react\";\nimport axios from \"axios\";\nconst useAxios = (axiosConfig, shouldFetch = true) => {\n  _s();\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const fetchData = useCallback(async (overrideConfig = {}) => {\n    setLoading(true);\n    try {\n      const response = await axios({\n        ...axiosConfig,\n        ...overrideConfig\n      });\n      setData(response.data);\n      setError(null);\n    } catch (err) {\n      setError(err);\n    } finally {\n      setLoading(false);\n    }\n  }, [axiosConfig]);\n  useEffect(() => {\n    if (shouldFetch) {\n      fetchData();\n    }\n  }, [fetchData, shouldFetch]);\n  return {\n    data,\n    error,\n    loading,\n    refetch: fetchData\n  };\n};\n_s(useAxios, \"Wq7ilcSAzCMTLyRcWpyb7KWDrMs=\");\nexport default useAxios;\n\n/*\r\nDOCUMENTATION:\r\n\r\nimport useAxios from './useAxios';\r\n\r\nconst Dashboard = () => {\r\n  const authToken = localStorage.getItem(\"authToken\");\r\n  const refreshToken = localStorage.getItem(\"refreshToken\");\r\n  const serverUrl = process.env.REACT_APP_SERVER_URL;\r\n\r\n  const { data, error, loading, refetch } = useAxios(\r\n    {\r\n      url: `${serverUrl}/app/dashboard`,\r\n      method: 'GET',                           //this can be PUT,POST or GET\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'x-auth-token': authToken,              // Authorization token\r\n        'x-refresh-token': refreshToken,        // Custom refresh token header\r\n      },\r\n      data: {                                   //Your JSON data to pass unto the API\r\n        id: 69,\r\n        username: 'NewUser123',\r\n        password: 'newpassword',\r\n      },\r\n    },\r\n    false // Manual fetch, do not run on mount , set this to true to run on start\r\n  );\r\n  const handleRefreshContent = () =>{\r\n        refetch(); // Manually trigger the request\r\n    } \r\n\r\n    return(\r\n         <div>\r\n            <button onClick={handleRefreshContent} disabled={loading}>\r\n                Get dashboard data\r\n            </button>\r\n\r\n            {loading && <p>Loading...</p>}\r\n            {error && <p>Error: {error.message}</p>}\r\n            {data && <p>Post Updated! ID: {data.id}</p>}\r\n        </div>\r\n    );\r\n}\r\n    \r\n    \r\n*/","map":{"version":3,"names":["useState","useEffect","useCallback","axios","useAxios","axiosConfig","shouldFetch","_s","data","setData","error","setError","loading","setLoading","fetchData","overrideConfig","response","err","refetch"],"sources":["C:/Users/torre/Documents/GitHub/Pugad Maharlika Web App/Pugad-Maharlika-Frontend/client/src/hooks/useAxios.js"],"sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst useAxios = (axiosConfig, shouldFetch = true) => {\r\n  const [data, setData] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const fetchData = useCallback(\r\n    async (overrideConfig = {}) => {\r\n      setLoading(true);\r\n      try {\r\n        const response = await axios({ ...axiosConfig, ...overrideConfig });\r\n        setData(response.data);\r\n        setError(null);\r\n      } catch (err) {\r\n        setError(err);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    },\r\n    [axiosConfig]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (shouldFetch) {\r\n      fetchData();\r\n    }\r\n  }, [fetchData, shouldFetch]);\r\n\r\n  return { data, error, loading, refetch: fetchData };\r\n};\r\n\r\nexport default useAxios;\r\n\r\n/*\r\nDOCUMENTATION:\r\n\r\nimport useAxios from './useAxios';\r\n\r\nconst Dashboard = () => {\r\n  const authToken = localStorage.getItem(\"authToken\");\r\n  const refreshToken = localStorage.getItem(\"refreshToken\");\r\n  const serverUrl = process.env.REACT_APP_SERVER_URL;\r\n\r\n  const { data, error, loading, refetch } = useAxios(\r\n    {\r\n      url: `${serverUrl}/app/dashboard`,\r\n      method: 'GET',                           //this can be PUT,POST or GET\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'x-auth-token': authToken,              // Authorization token\r\n        'x-refresh-token': refreshToken,        // Custom refresh token header\r\n      },\r\n      data: {                                   //Your JSON data to pass unto the API\r\n        id: 69,\r\n        username: 'NewUser123',\r\n        password: 'newpassword',\r\n      },\r\n    },\r\n    false // Manual fetch, do not run on mount , set this to true to run on start\r\n  );\r\n  const handleRefreshContent = () =>{\r\n        refetch(); // Manually trigger the request\r\n    } \r\n\r\n    return(\r\n         <div>\r\n            <button onClick={handleRefreshContent} disabled={loading}>\r\n                Get dashboard data\r\n            </button>\r\n\r\n            {loading && <p>Loading...</p>}\r\n            {error && <p>Error: {error.message}</p>}\r\n            {data && <p>Post Updated! ID: {data.id}</p>}\r\n        </div>\r\n    );\r\n}\r\n    \r\n    \r\n*/\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AACxD,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,QAAQ,GAAGA,CAACC,WAAW,EAAEC,WAAW,GAAG,IAAI,KAAK;EAAAC,EAAA;EACpD,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EAE7C,MAAMc,SAAS,GAAGZ,WAAW,CAC3B,OAAOa,cAAc,GAAG,CAAC,CAAC,KAAK;IAC7BF,UAAU,CAAC,IAAI,CAAC;IAChB,IAAI;MACF,MAAMG,QAAQ,GAAG,MAAMb,KAAK,CAAC;QAAE,GAAGE,WAAW;QAAE,GAAGU;MAAe,CAAC,CAAC;MACnEN,OAAO,CAACO,QAAQ,CAACR,IAAI,CAAC;MACtBG,QAAQ,CAAC,IAAI,CAAC;IAChB,CAAC,CAAC,OAAOM,GAAG,EAAE;MACZN,QAAQ,CAACM,GAAG,CAAC;IACf,CAAC,SAAS;MACRJ,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EACD,CAACR,WAAW,CACd,CAAC;EAEDJ,SAAS,CAAC,MAAM;IACd,IAAIK,WAAW,EAAE;MACfQ,SAAS,CAAC,CAAC;IACb;EACF,CAAC,EAAE,CAACA,SAAS,EAAER,WAAW,CAAC,CAAC;EAE5B,OAAO;IAAEE,IAAI;IAAEE,KAAK;IAAEE,OAAO;IAAEM,OAAO,EAAEJ;EAAU,CAAC;AACrD,CAAC;AAACP,EAAA,CA5BIH,QAAQ;AA8Bd,eAAeA,QAAQ;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}